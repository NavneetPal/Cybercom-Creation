********************************GIT***********************************
1.SETTING ALIAS IN GIT

    You can set alias name using the following command
        
        $ git config --global alias.st status

    Now you have set the alias name for status as st.
    Now you can get the status of your git repository using command:

        $ git status    or  $ git st

    Similarly you can set alias name for restore --stage by using command:

        $git config --global alias.unstage 'restore --staged'

        $git unstage this.txt

********************************************************************************************
********************************MERGE THE PULL REQUEST ON GITHUB****************************

If someone has forked your git repo from github to his github accound and clone it to his
local rep and made some suceesful change and wanted us to push the same changes to our code.

So he will first push the changes from his local rep to remote repo using the command:

    $ git push origin master

And then he will made a pull request and can add a short message to the real autor of the repo
explaining the change sthat he have made.

On the author side he will see the pull request from the contributor if no merge conflict is occuring he will merge the pull request
and the changes will be modified to his original repo

If author want changes in local rep too then he can write commanfd like:
    
    $ git pull

*********************************************************************************************************
******************************HOW TO UNDO LAST GIT COMMIT*************************************************

If you have made some commit to your repo and you want to undo the commit then you can use the git reset command.

1.GIT RESET SOFT
The easiest way to undo the last Git commit is to execute the “git reset” command with the “–soft” option that will preserve changes done to your files. 
You have to specify the commit to undo which is “HEAD~1” in this case.

        $ git reset --soft HEAD~<no-of-commit>

        here code remain intact and the commit get deleted from the log history and the
        files comes into stagged area.
        "soft" means only commit get deleted but not the code
        "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted

2.GIT RESET HARD
In order to undo the last commit and discard all changes in the working directory and index, execute the “git reset” command
with the “–hard” option and specify the commit before HEAD (“HEAD~1”).

    $git reset --hard HEAD~<no-of-commit>

    here code will get deleted with the commit.
    "hard" means with the commit all the code of the same commit will also get deleted
    "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted

3.GIT RESET MIXED
In order to undo the last Git commit, keep changes in the working directory but NOT in the index, you have to use the “git reset
command with the “–mixed” option. Next to this command, simply append “HEAD~1” for the last commit.

    $git reset --mixed HEAD~<no-of-commit>

    here code remain intact and commit gets deleted
    "mixed" means code remain intact and code comes into unstagged area 
    "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted

****************************************************************************************************************************
************************ MERGE CONFLICT ************************************************************************************


A merge conflict is an event that occurs when Git is unable to automatically resolve differences in code between two commits.
 When all the changes in the code occur on different lines or in different files, Git will successfully merge commits without your help.

How conflict occurs?
Let sayyou have one main branch and you made an another branch and you made the changes and on the main branch someone else is making changes
so at end what happen is if they are working on same changes and now if you want to merge with main branch then git get confuse which changes has to be taken
and give merge conflict occur and want you to resolve it.

How to resolve it??

It is simple when you merge you get conflict error and if you are vs code it will give you option like:

    Accept current change| Accept incoming change | Accept both changes | compare change

whatever changes you like you take it and the add your respective file wheere conflict occur using command:

    $ git add index.html

    $git commit -m "Merged issue1"

********************************************************************************************************************************************
*****************************************BRANCH MANAGEMENT**********************************************************************************

For seeing all the branches you use the command :

    $ git branch

For getting all your branches with the latest commit you write the command
    
    $ git branch -v

    branchname commitcode commitmessage
    In this format you will get your result.

For getting all your merged branch


    $ git branch --merged

For getting the branches that are not merged

    $ git branch --no-merged

If you are deleting the branch that are not merged using the command below you will get error:

    $git branch -d "branchname"

    so delte it write "D" onstaead of "d"

    $ git branch -D <branchname>

****************************************************************************************************************